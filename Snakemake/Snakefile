import os
import re

DATA_DIRECTORY = config['DATA_DIRECTORY']
OUTDIR = config['OUTDIR']
LOG_DIR = os.path.join(OUTDIR, 'log')
SAMPLE = config['SAMPLES']
REFERENCE_DIR = config['REFERENCE_DIR']

GENOME_DIR = config['GENOME_DIR']

if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

for sample in SAMPLE:
    sample_outdir = os.path.join(OUTDIR, sample)
    if not os.path.exists(sample_outdir):
        os.makedirs(sample_outdir)

rule all:
    input:
        os.path.join(OUTDIR, "pca.png"),
        os.path.join(OUTDIR, "clustering.csv")
        
# download mm10 reference genome from ENCODE
rule get_reference_fasta:
    output:
        os.path.join(REFERENCE_DIR, "mm10_no_alt_analysis_set_ENCODE.fasta.gz")
    shell:
        "wget {config['REFERENCE_FASTA']} --output-document {output}"

# download mm10 reference genome annotation from ENCODE
rule get_reference_gtf:
    output:
        os.path.join(REFERENCE_DIR, "ENCFF871VGR.gtf.gz")
    shell:
        "wget {config[REFERENCE_GTF]} --output-document {output}"

rule gunzip_reference:
    input:
        os.path.join(REFERENCE_DIR, "mm10_no_alt_analysis_set_ENCODE.fasta.gz"),
        os.path.join(REFERENCE_DIR, "ENCFF871VGR.gtf.gz")
    output:
        os.path.join(REFERENCE_DIR, "mm10_no_alt_analysis_set_ENCODE.fasta"),
        os.path.join(REFERENCE_DIR, "ENCFF871VGR.gtf")

rule index_reference:
    input:
        fasta = os.path.join(REFERENCE_DIR, "mm10_no_alt_analysis_set_ENCODE.fasta"),
        gtf = os.path.join(REFERENCE_DIR, "ENCFF871VGR.gtf")
    output:
        os.path.join(GENOME_DIR, "Log.out")
    threads: 4
    shell:
        "STAR --runThreadN {threads} "
        "--runMode genomeGenerate "
        "--genomeDir {GENOME_DIR} "
        "--genomeFastaFiles {input.fasta} "
        "--sjdbGTFfile {input.gtf}"

rule prefetch_sra:
    output:
        os.path.join(DATA_DIRECTORY, "{sample}.sra")
    shell:
        "prefetch {wildcards.sample}"

rule sra_to_fastq:
    input:
        os.path.join(DATA_DIRECTORY, "{sample}.sra")
    output:
        os.path.join(OUTDIR, "{sample}","{sample}_1.fastq.gz"),
        os.path.join(OUTDIR, "{sample}", "{sample}_2.fastq.gz")
    shell:
        "fastq-dump --gzip --outdir {OUTDIR}/{wildcards.sample} --split-files {input}"

rule gunzip_fastq:
    input:
        os.path.join(OUTDIR, "{sample}", "{sample}_1.fastq.gz"),
        os.path.join(OUTDIR, "{sample}", "{sample}_2.fastq.gz"),
    output:
        temp(os.path.join(OUTDIR, "{sample}", "{sample}_1.fastq")),
        temp(os.path.join(OUTDIR, "{sample}", "{sample}_2.fastq")),
    shell:
        "gunzip -k {input}"

rule star_align:
    input:
        read1 = os.path.join(OUTDIR, "{sample}", "{sample}_1.fastq"),
        read2 = os.path.join(OUTDIR, "{sample}", "{sample}_2.fastq"),
        log = os.path.join(GENOME_DIR, "Log.out")
    output:
        os.path.join(OUTDIR, "{sample}", "Aligned.sortedByCoord.bam")
    threads: 4
    shell:
        "STAR --runThreadN {threads} "
        "--outputFileNamePrefix {OUTDIR}/{wildcards.sample}/ "
        "--outSAMtype {config[OUTPUT_SAM_TYPE]} {config[OUTPUT_SORT]} "
        "--genomeDir {GENOME_DIR} "
        "--readFilesIn {input.read1} {input.read2}"

rule PCA_clustering:
    input:
        expand(os.path.join(OUTDIR, "{sample}", "Aligned.sortedByCoord.bam"), sample = SAMPLE)
    output:
        os.path.join(OUTDIR, "pca.png"),
        os.path.join(OUTDIR, "clustering.csv")
    script:
        "scripts/pca_clustering.R"
